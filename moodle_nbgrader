import re, nbgrader, csv, codecs, sys, os, shutil
from nbgrader.apps import NbGraderAPI
import zipfile, fire, pdfkit
from i18n import *
verbose = True

def collect(assign_name, csvfile=None, zipfname=None):
    """
    Collects all the assignments from zip and csv files.

    Must have the following files in imports/

       <assignment>.csv <assignment>.zip

    The results will be copied into submitted/<matric_id>/<submission_name>/submission.ipynb
    """
    if csvfile is None:
        csvfile = os.path.join("imports", assign_name+".csv")
    if zipfname is None:
        zipfname = os.path.join("imports", assign_name+".zip")

    api = NbGraderAPI()
    gradebook = api.gradebook

    archive = zipfile.ZipFile(zipfname)
    fnames = {}

    # read all the filenames, and get the submission
    # ids for each filename
    for f in archive.filelist:
        fname = f.filename
        match = re.match(r"[\*\w\-\ ,\'\s\.]+_([0-9]+)_assignsubmission_file_.*", fname)
        if match:
            fnames[match.groups()[0]] = fname
        else:
            print("Did not match ", fname)

    with open(csvfile, newline='', encoding='utf-8-sig') as f:
        reader = csv.DictReader(f)
        assign_matric = {}
        n_rows = 0
        successful_files = 0
        missing_files = 0
        problem_files = 0

        for line in reader:
            ident, fullname,email, status,  grade, max_grade = (line[ident_str], line[fullname_str], line[email_str], line[status_str], line[grade_str], line[max_grade_str])

            should_be_submission =  submitted_str in status

            # make sure we have this student in our records
            unique_id = email[0:7]
            try:
                result = gradebook.find_student(unique_id)
            except nbgrader.api.MissingEntry:
                print("Creating gradebook entry for ", unique_id)
                gradebook.update_or_create_student(unique_id, first_name=fullname, last_name="", email=email)

            # map assignment numbers to matric numbers
            matric = email[0:7]
            match = re.match('Participant([0-9]+)', ident)
            if not match:
                print(f"Could not find identity for participant {ident}")
                print(f"\tFull name : {fullname}")
                continue

            ident = match.groups()[0]
            assign_matric[ident] = matric

            n_rows += 1
            if ident in fnames:
                # extract each file to the submission directory
                submission_path = os.path.join("submitted", matric, assign_name)
                try:
                    os.makedirs(submission_path)
                except:
                    pass
                fname = fnames[ident]
                notebook_file = next(ff for ff in os.listdir(os.path.join("release", assign_name)) if not ff.startswith('.'))
                if verbose:
                    print("Extracting {notebook} to {path}".format(notebook=notebook_file, path=submission_path))

                source = archive.open(fname)
                target = open(os.path.join(submission_path, notebook_file), "wb")
                with source, target:
                    shutil.copyfileobj(source, target)

                successful_files += 1
            else:
                # submission was in the CSV file, but we don't have a zip file
                if should_be_submission:
                    print("*** WARNING! No submission for", fullname, matric, "but submission status was", status, "***")
                    print("    Ident = %s"%ident)
                    problem_files += 1
                else:
                    # submission was not listed in the CSV file as being submitted
                    if verbose:
                        print("No submission for ", fullname, matric, status, "as expected")
                    missing_files +=1

        # print out a summary of what was processed
        print("""{n_files:d} succesfully extracted of {total_zip:d} files in the ZIP archive.
{missing:d} files were not submitted, as expected.
{problem:d} files were missing, but showed as submitted on Moodle.
{total:d} records were processed, and {total_csv} rows in the CSV.
""".format(n_files=successful_files, missing=missing_files, problem=problem_files,
total=successful_files+missing_files+problem_files,
total_zip = len(fnames), total_csv=n_rows))


def gradesheet(assignment, with_feedback=True):
    """
    Updates a CSV file gradesheet with the results from grading the assignment.

    The CSV file must have be downloaded from Moodle with "offline gradesheets" enabled in the assignment settings.

    The input will be imports/ASSIGNMENT.csv
    The output will be in exports/ASSIGNMENT.csv

    Feedback will be zipped up into the file exports/ASSIGNMENT_feedback.zip and this can be uploaded to Moodle if "WITH_FEEDBACK" is set to True. This uploads all student feedback in one go.
    """
    api = NbGraderAPI()
    gradebook = api.gradebook
    csvfile = os.path.join("imports", assignment+".csv")

    try:
        os.mkdir("exports")
    except FileExistsError:
        pass
    if verbose:
        print("Updating gradesheet for {0}...".format(assignment))
    with open(csvfile, newline='', encoding='utf-8-sig') as f:
        reader = csv.DictReader(f)

        fname =  os.path.join("exports", assignment+".csv")

        if with_feedback:
            archive = zipfile.ZipFile(os.path.join("exports", "feedback_"+assignment+".zip"), 'w', zipfile.ZIP_DEFLATED)
        with open(fname, 'w', encoding='utf-8', newline='') as out:
            writer = csv.DictWriter(out, reader.fieldnames)
            writer.writeheader()
            for line in reader:
                email, ident, fullname, status, grade, max_grade = line[email_str], line[ident_str], line[fullname_str], line[status_str], line[grade_str], line[max_grade_str]
                unique_id = email[0:7]
                try:
                    submission = gradebook.find_submission(assignment, unique_id)
                except:
                    if submitted_str in status:
                        print("WARNING: No submission for {id} in assignment {assign}".format(id=unique_id ,assign=assignment))
                    else:
                        if verbose:
                            print("\tNo submission for {id} in assignment {assign}, as expected".format(id=unique_id, assign=assignment))
                else:
                    if verbose:
                        print("\tProcessing submission for {id} in assignment {assign}".format(id=unique_id, assign=assignment))


                    fbk_path = os.path.join("feedback", unique_id, assignment)
                    try:
                        files = [os.path.join(fbk_path, f) for f in os.listdir(fbk_path) if f.endswith('.html')]
                        assign_id = ident[11:]

                        # create the path to the feedback file
                        fbk_full_path = "{fullname}_{assign_id}_assignsubmission_file_".format(fullname=fullname, assign_id=assign_id)
                        for f in files:
                            archive.write(f, arcname=os.path.join(fbk_full_path, os.path.basename(f)))
                    except FileNotFoundError:
                        print("HTML feedback file for {fullname} {id} {assign} is missing".format(id=unique_id,
                        fullname=fullname, assign=assignment))
                        # no feedback to generate
                    line[grade_str] = submission.score

                    # warn about dubious scores
                    grade_int = 0 if line[grade_str] == '' else int(line[grade_str])
                    if grade_int <=0 or grade_int > submission.max_score:
                        print("Warning: {matric} {name} has a score of {grade}".format(matric=unique_id, name=fullname, grade=grade_int))

                    # correct the maximum grade
                    line[max_grade_str] = str(submission.max_score)
                    writer.writerow(line)

            print("Wrote to {0}".format(fname))

            # tidy up the feedback file
            if with_feedback:
                archive.close()

def release_zip(assignment):
    """
    Zips up the assignment folder.

    Zips up the assignment folder in release/ASSIGNMENT and puts it in uploads/ASSIGNMENT.zip>
    """
    fullpath = os.path.join("release", assignment)
    if os.path.isdir(fullpath):
        print("Creating archive upload/%s.zip" % assignment)
        shutil.make_archive("upload/%s" % assignment, "zip", fullpath, verbose=True)
    shutil.unpack_archive("upload/%s.zip" % assignment, "tests/%s" % assignment)

if __name__ == '__main__':
  fire.Fire({'collect' : collect,\
             'gradesheet' : gradesheet,\
             'release_zip' : release_zip})
